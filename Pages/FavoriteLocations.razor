@page "/favorite-locations"
@using BlazorWeatherApp.Components.FavoriteLocation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject RootSettings Settings

<div class="container">
    <div class="row">
        <div class="col-12 col-md-9 offset-md-1">
            <div class="mb-2">
                <NavLink href="weather">Search</NavLink> | <b>Favorites</b>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12 col-md-9 offset-md-1">
            <h5>Saved Locations</h5>
            @if (showMessage)
            {
                <div class="alert alert-success py-2" role="alert">
                    The Location was deleted successfully
                </div>
            }
            @if (loading)
            {
                <div class="loading">
                    Loading...
                </div>
            }
            else
            {
                @if (forecasts.Count() > 0)
                {
                    @foreach (WeatherForecast forecast in forecasts)
                    {
                        <FavoriteLocationComponent forecast="forecast" OnDeleteButtonClick="HandleDeleteEvent" />
                    }
                }
                else
                {
                    <div class="no-records">
                        You don't have locations saved
                    </div>
                }
            }
        </div>
    </div>
</div>

@code
{
    int userId;
    bool loading = true;
    private bool showMessage = false;
    FavoriteLocation[]? locations = [];
    List<WeatherForecast> forecasts = new List<WeatherForecast>();

    protected override async Task OnInitializedAsync()
    {
        string userIdStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
        userId = Int32.Parse(userIdStr);
        await FetchLocations();
    }

    protected async Task FetchLocations()
    {
        forecasts = [];
        locations = await
        Http.GetFromJsonAsync<FavoriteLocation[]>($"{Settings.AppSettings.LocalApiUrl}/locations/{userId}");

        foreach (FavoriteLocation location in locations)
        {
            var locationForecast = await
            Http.GetFromJsonAsync<WeatherForecast>($"{Settings.AppSettings.WeatherForecastApiUrl}?key={Settings.AppSettings.WeatherApiKey}&q=id:{location.CityId}&aqi=no");

            locationForecast.Location.FavoriteLocationId = location.Id;
            forecasts.Add(locationForecast);
        }

        loading = false;
    }

    private async Task HandleDeleteEvent()
    {
        await FetchLocations();
        await ShowMessage();
    }

    private async Task ShowMessage()
    {
        showMessage = true;
        StateHasChanged();

        await Task.Delay(3000);
        showMessage = false;

        StateHasChanged();
    }

}
